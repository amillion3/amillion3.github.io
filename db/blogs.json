{
  "projects": [
    {
      "id": "blog001",
      "title": "Partially through week 2",
      "date": "02/21/2018",
      "post": "Well, NSS is well underway. We are into our second week and I am feeling overall positive about everything. Tonight I fully understood what the next 12 months will be like, BUSY! I am thankful I spent the past year preparing for bootcamp, this first couple weeks would feel pretty raw otherwise. I am comfortable with HTML and CSS, though not an expert. I’m hoping that day-to-day use will let it become muscle memory. For now, I feel like I’m having to think a bit too long before tackling the issue at hand. I must be patient, I am still learning (and always will). For me, CSS is always a bit tricky. Since there is more than one way to handle styling, it can be tricky to figure out the best way or the most maintainable way. I want clean code that will be easy to pick up in 3 months time and not be totally lost. As well, there are so many ins and outs and little gotchas with CSS. For example, in my head, I’ll sometimes think it’s text-size: to adjust the font size. No, it’s font-size! In time, I’m sure those little things will go away and I won’t think twice when I adjust the size of the font. Something we haven’t touched on much yet is responsive design. Developing mobile-first is really interesting and changes how one approaches the CSS. I am interested in diving more into this. We also discussed Git/GitHub the past two nights. Boy am I glad I started learning and messing around with this technology months ago. It’s kind of abstract and, “Why would I need this?” at first. Of course, this version control system (VCS) is invaluable to developers and learning it is a fundamental skill. So far, we haven’t touched on anything too far out of what I already learned. One thing I did learn, I have already developed one bad habit with the way I treat my master branch! I frequently pushed directly to the master, instead of doing a pull request. Tsk tsk! Using Git means using the command line. My roommate from college insisted I run Linux (Ubuntu) instead of windows. That was an interesting experiment and gave me fantastic exposure to the command line. Feeling at least partially comfortable in the command line has been incredibly helpful in the past few weeks and especially in NSS. Finally, our class and instructors seem like a really good group so far. I am constantly laughing or smiling during lectures. People sitting around me seem excited to be there and eager to learn. I hope this energy continues and we can feed off each other for the next several months."
    },
    {
      "id": "blog002",
      "title": "CSS Zen Garden and Git/GitHub for days",
      "date": "02/28/2018",
      "post": "CSS/HTML are complete and now, it’s time for JavaScript! Alright! I’m really looking forward to JS and everything else. After a little review, it should be all fresh things to learn. 2/28/18 Update Well the “little review” part was right! We jumped right into JS, playing with strings one night and arrays the next. We also dealt with regular expressions which are pretty great. I can also see how regular expressions are a huge pain! So far, my favorite part about JS is how powerful it can be with just a little knowledge. The ability to iterate through arrays is incredible and allows us to churn through a lot of data in a short time. Some of the solutions to our challenges (think, algorithm challenges) are really quite clever. I’m looking forward to further looping methods and some functional programming (map, reduce, filter). I have traditionally struggled with these aspects of JS. I’m hopeful NSS and our wonderful instructors can set me on the right path with the proper understanding. Today (2/26/18), our CSS Zen Garden Assignments were due. The goal was to take some CSS Zen Garden design and recreate the HTML and CSS. Our study group tackled this exercise, partially as a team and the rest as an individual. As a team we discussed the HTML structure and appropriate HTML semantic tags. Once we agreed on the HTML, we all sourced the same images (2 total) and began to code away. I chose to code all the HTML first and then tackle the CSS last. I have always fought with CSS (who hasn’t, really?), but this was a fairly smooth styling. Perhaps the muscle memory is starting to be built. I tried to be deliberate and clean with both HTML and CSS. I feel I was reasonably successful at both, with CSS being the more challenging of the two. We used a different header image and we did not use the same font. Another assignment we had was: Create 25 GitHub repos (5 a day for 5 days) Create and push the README.md to the master branch Create a ‘setup’ branch Create HTML boilerplate and CSS to turn the background red Commit changes to Git and push changes to GitHub  Create a pull request, review code, and approve PR if possible Phew! It took a very long time the first day to do all these. By day 5, it was natural and normal. A bit tedious, but it really drove home the basic cycle of Git/GitHub usage. Today at work, I listened to numerous videos discussing rebasing, squashing commits, and ‘git difftool’. These are more advanced topics and I’m still wrapping my head around them. Late yesterday, a local developer noticed my seemingly endless stream of ‘test’ repos and commits. It made for a good laugh!"
    },
    {
      "id": "blog003",
      "title": "Algorithm Challenges",
      "date": "03/07/2018",
      "post": "JavaScript. Well, it's been a challenging past few days. We had 10 array challenges assigned to us. They were not easy, at least for our class. They certainly dumped us off into the deep end to see how we all fared. I think some people did pretty well and other people were paralyzed with a sense of 'where do I begin?!'. I am fortunate that my time on freeCodeCamp exposed me to such word problems, so it was not immediately overwhelming. This experience gave me some time to think more like a programmer. For example, wrapping my head around nested for loops wasn't too challenging. I still need a lot of practice though, as I tend to come up with extremely complex solutions when there are better and more simple solutions. A daily dose of codewars or something similar would be very beneficial to me. Monday's class left my head spinning. Lauren went through 6 code challenges, as completed by our study groups. After each challenge, she refactored our code in a more efficient manner. In most cases, this involved higher order functions. Higher order functions include: forEach() - Similar to a for loop, but easier to read. Supposedly much, much slower though. (https://coderwall.com/p/kvzbpa/don-t-use-array-foreach-use-for-instead) filter() - Accepts a callback function and executes a set of instructions to determine to keep or delete data in an array. reduce() - Accepts a callback function that summarizes one array into a single variable. map() - Accepts a callback function that transforms each item of an array in the same manner (for example, doubling each function). I found this short set of videos from Fun Fun Function to be pretty helpful in understanding these better. https://www.youtube.com/watch?v=BMUiFMZr7vk&list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84 In the videos, he walks through the each higher order function using a traditional for() loop and then refactors it using the filter() or map() and compares them. I found it very helpful to more completely understand them. As well, he touches on arrrow functions and shows how much cleaner and shorter the code can be, it's pretty incredible! I know these higher order functions and functional programming is very important, so I am going to focus on learning and implementing these where it makes sense. I think it will be difficult at first, but worth it in the long run."
    },
    {
      "id": "blog004",
      "title": "Language Translator and Planning on GitHub",
      "date": "03/15/2018",
      "post": "Our project from last week was to create a basic language translator. We did the planning as a group, but coded everything individually. It was my first experience using GitHub's Project page. It was a lot more work than I was expecting! I understand why that or a Kanboard is valuable though. As Zoe said, a good project is 70% planning and 30% coding. Breaking down every single step in great detail really makes things easy to follow and easy to delegate. It's also made me realize how 'Wild West' my planning has been in the past. I usually just have an idea in my head, maybe a quick sketch and then I jump right in. It certainly is more fun to go straight to coding, but I find myself without a set path or set of features to tackle.  Another great thing about attending NSS is great opportunity to work with a team and a team that rotates about every 5 weeks. I'll get to know all my cohort members quite well and everyone brings a little something different to the team. On top of that, it's a great opportunity to learn how to code with a team. All of my coding so far has been individual, while most jobs require you work as a team with other devs, as well as management and other roles. I certainly need practice and exposure to working effectively as a team member. My first study group has been pretty great and we have had lots of laughs.I will dive into this more next blog post, but working with Git/GitHub as a team is a much different experience than working solo! I feel comfortable doing my own projects with no other contributors, but working as a team is honestly, a little uncomfortable right now! I want my code to be well understood and not make people scratch their heads. It's a new element and something we will get into more with our study group and lab time this weekend."
    },
    {
      "id": "blog005",
      "title": "Group Work and ES6",
      "date": "03/21/2018",
      "post": "Our group projects wrapped up this past weekend. It was a really great way to really get to know our study group and help each other out. It's kind of sad our group split up after coming together and having a good time. Overall, it was a positive experience, but working with teams while coding will take some getting used to. I'm not in charge anymore, I can't just make a decision and run with it. We need to decide to approach the project in a similar way. We need to tackle project planning and task delegation. We need to resolve problems or disagreements along the way. It's been a bit of a learning curve, but it's a good thing! Resolving git conflicts is new and interesting. Thankfully, there was no major incidents and once we got rolling, we all seemed to understand and work well as a team. One of the most interesting things about working with a team is that my tasks need to be done, done, before submitting them. I can't finish it 95% and come back later. I need to wrap it up entirely and then move on. As well, I can't sit there and endlessly tweak spacing or other things. That's a wonderful thing in my opinion! This past Monday, NSS was closed due to the weather. I must admit, I didn't spend the whole night on coding related work. I was prepping for a job interview! If I get the job, programming will be roughly 1/3 of my job, which is fantastic! Fingers crossed. I spent the other part of my Monday night watching ES6 videos and taking notes. I learned about let, const, arrow functions, and I started learning about classes. I called it quits on classes as it was getting late. It was great prep for the following night, ES6 from Lauren! Since we were short on time, she pushed through ES6 pretty fast, I'm glad I studied a bit the night before. My favorite thing I learned was template literals, super neat. Instead of concatenating strings and variables together using a variety of quotes and + signs, ES6 makes it much easier.Dinosaur way: var output = 'My name is ' + userName + ' and I like to ' + hobby[0] + ' and ' + hobby[1] + '.' Shiny new way: const output = `My name is ${userName} and I like to ${hobby[0]} and ${hobby[1]}.` Arrow functions are also pretty interesting and I look forward to getting more comfortable with them. The 3 takeaways I learned about arrow functions are they are small, inline and single purpose."
    },
    {
      "id": "blog006",
      "title": "Event Listeners and XHRs",
      "date": "03/27/2018",
      "post": "In NSS, we covered XHRs this week! Also known as XMLHTTPRequests, these are used by many languages to send and receive data from JSON or XML files, as well as servers and APIs. This is pretty exciting, to me at least! Everything has been slowly building, adding a little complexity each class. It's really neat to see how everything ties together and starts to really make our pages have functionality. I can see why falling a little behind in the beginning would make it really hard to catch up and stay up to speed. Prework is key to building those foundations and understanding (at least partially) what is happening. I remember making XHR calls using JavaScript and it not being nearly this straight forward, I struggled and wished for a clean, easy to follow example. I gave up and used jQuery, but really wanted a vanilla JS solution. I have made a few API requests in Python and I found them much more natural than the JS variant I was trying. This past weekend, I spent time updating my README.md files and grabbing screenshots. A bit tedious, but my repos are much prettier now! I can certainly understand why developers would skip repos without decent documentation. Some screenshots and basic install/how to run instructions goes a long ways. It should be easier to keep my READMEs up to date, I'll just do them at the end of each project. I am team lead this week, alright! I also dig the project for this week. Sounds like a fun card page about the solar system. My daughter and her love for the planets will be so excited!! At work, I'm wrestling with a Python script. I'm so focused on JS right now and it's been a while since I touched Python, so it's slow going. I'm sure I'll feel better about it tomorrow when I can sleep on my problems. It's great to get paid to code!"
    },
    {
      "id": "blog007",
      "title": "More fun with XHRs!",
      "date": "04/08/2018",
      "post": "This past week was kind of a roller coaster. Big ups and downs, but thankfully, the downs didn't last too long. Our big assignment this week was to create a solar system single-page app. The page upon loading would have 8 cards, one for each planet. When you put your mouseover the card, an image of the planet would show up. When you click it, the cards would go away and one big card would appear. This would show a large image of the planet, with additional details about the planet. In addition, there is basic search functionality at the top of the page. Fun project! Two things really threw me off about this project: 1) Trying to make a single XHR call to do all the work. 2) Figuring out how to pass JSON data around as needed.In regards to the first point, I tried and tried to make a single XHR call that would power the whole page. I knew global variables were a no-no because of security issues and the fact that in the real world, data from a database could change at anytime. My initial thought was to try and capture the JSON data and allow other functions to call and have it returned. I went through a few iterations of this and seemingly endless console.log() statements. I finally gave up on this idea and decided to see what others were doing. As it turns out, multiple XHR calls are needed!! That would have made it so much simpler and saved time.The second point, passing JSON data where it's needed was my final big hurdle on this project. Now that I had two XHR calls (one for the mini-cards and one for the big-cards), I wanted to pass the data out to other functions after a 'click' event. Simple, right? Well...no, not simple. After Googling, digging through Stack Overflow, I was getting the message. You can't pass data through a named function in an event listener. Why!! Well, no biggie, actually. You can just call an anonymous function and run it right there. Bingo. Nailing that down was huge and I felt quite proud to have solved this issue. I was able to share my knowledge with my teammates and I was happy to help them. I really enjoy the collaborative approach to learning here at NSS. It's more of a sharing knowledge and teaching one another space, instead of the traditional teacher-student relationship I'm so used to. After all this, I needed to organize my code better and add some comments. It's the most complicated JavaScript I've written and it's easy to get lost in the code. It was well worth the time and I hope it helps whomever looks at my code more easily follow my logic and flow. I wanted to do some bigger refactoring, but I just didn't have the time."
    },
    {
      "id": "blog008",
      "title": "XHRs, with Grunt and Browserify",
      "date": "04/15/2018",
      "post": "Our task this week was diving further into XHRs. More XHRs you say? Yes, we tackled XHRs in the context of multiple JSON files. We had to figure out how to combine them without simply pushing them into a global variable. It would have been 10x easier to assign them to a global and work on them from there. However, globals are less secure than variables scoped within functions, so it's a natural choice in favor of security. I wrote my code partially once and then deleted it. I wrote my code again, late into Friday and then thought I was on the right track. However, after a very helpful discussion in class the next day, I realized my approach was not what I wanted. Refactoring for the third time was the ticket! The discussion in class really helped clear up the proper way to handle multiple JSON files in a secure manner. It takes some jumping through hoops and JS trickery, but it's quite doable. I really struggled with this Friday night, so finally understanding it was so satisfying! After the functionality was in place, it was time to use Bootstrap. It took more effort than I thought it would to get Bootstrap working the way I wanted. A little out of practice, sure. Once I got back into it, I felt a little more comfortable. The docs are great and it's quite common, so questions and answers litter the internet. We are starting Grunt and Browserify now, hooray! This is totally new to me and it seems pretty neat. Setting up new projects takes a lot more effort than before. I'm sure it will speed up in the future, but for now, I have to go step by step through a PowerPoint. I like the live-reload feature, it's pretty slick. For my personal projects, a CSS Autoprefixer will be amazing, I can't wait to use that! There is a lot to this, so reading the docs and watching some videos will be helpful for me. Understanding how all the pieces fit together in Grunt/Browserify is a challenge. It's kind of like a tangled web that you have to follow and track the pieces. Once you do it a few times and then start stringing things together, it makes more sense. I was even able to throw in a randomizer function on my pet adoption website. I like the linter we are using too! Well, like is too strong of a word. I like that all of us are held to the same styling and we aren't supposed to cheat past it. It has certainly helped me identify when I inadvertently did something wrong too, such as using `let` instead of `const`. Standardizing our code will make it more readable when working with a team or helping to debug a cohort member's code."
    },
    {
      "title": "More Grunt and Browserify",
      "date": "04/24/2018",
      "post": "We continued with Browserify and Grunt this week. It was another challenge and very overwhelming at first. Our task was to create a Movie Maker app. In this app, the user could submit a movie budget (say $100,000) and then start adding components to the movie. These components were things like actors/actresses, locations, special effects, etc. Each movie component cost a certain amount of money that was added or removed from the budget depending on if it was part of the movie or not. As well, there was a progress bar to show if the movie completed all the requirements. Finally, text colors had to be changed based on the status (green was under budget, red was over budget, etc). At first, this project was quite overwhelming. There were so many moving parts and things to tie together, it kind of made my head hurt! Working with our team was a big help, breaking down the requirements and the functionality needed was important. One piece at a time, not the whole thing! This week, the whole class had study group at the same time and place. Our instructors knew we would need more help with the added complexity this week. It was super helpful to have them ready to assist. I chatted with Callan twice when I got stuck. Both times, I made very subtle mistakes, but it totally broke the app from moving forward. One of the things she told me or corrected me on was extremely helpful. In a file `data.js`, I had code similar to this: `module.exports = { doSomething, doSomethingElse, };` When I tried to reference these functions, I kept trying `doSomething(foo)` and `doSomethingElse(bar)`. These wouldn't work and I wasn't sure why. I triple checked for spelling errors, I checked my `require` statements, everything looked fine! Callan simply said, 'you are exporting an object from data.js, so how do you reference things inside that object?'. I kind of paused and thought for a second. Dot notation! That's it. I made the connection between the export and the call and what I was missing. It should have been `data.doSomething(foo)`!  Once I understood what was happening, it made a lot more sense how to properly structure my calls. One of those enlightening moments!"
    },
    {
      "id": "blog010",
      "title": "Chat app!",
      "date": "04/28/2018",
      "post": "This week, we worked on a chat application. We planned the project as a team and coded the project as a team. Overall, it was a good experience and coding with a team is practice I sorely need. Case in point, I inadvertently removed one of my cohort member's code and it totally broke functionality of the app. A careless merge conflict fix was to blame. I felt a bit embarrassed about it, I'll have to take a few extra seconds when reviewing merge conflicts. Another issue we had was when two of us merged our code together, the code I added inadvertently broke their code. A simple CSS line totally changed the functionality of his code. Neither of us were 'at fault', but without being intimately aware of each other's code, we weren't aware it would be an issue. After about 30 frustrating minutes, I tracked down the culprit!! It's also interesting working with a codebase where I don't know all of it and I didn't write a significant part of it. Some of the code was typical (XHR calls, buildDomString, printToDom, etc) while other parts were totally custom (the chat bot, for example). It is good practice reading others code and having to integrate my work with theirs. A big downside of group work is that sometimes you are waiting on other people to review your work or other people to finish their tasks. These delays can old quick, especially with limited time together. On the other hand, it's a good opportunity to re-read your own code, look ahead to the next ticket, or review outstanding pull requests. We present our app on Monday, so that should be fun to see everyone's final products."
    },
    {
      "id": "blog011",
      "title": "jQuery!",
      "date": "05/06/2018",
      "post": "This week we covered jQuery. I remember jQuery being easier than it was in class! Perhaps I just did the easier stuff with jQuery in my previous studies and that's why it felt surprisingly difficult. Both in freeCodeCamp and the NSS Jumpstart program, jQuery felt easier to pick up. For now, I'm stuck in a vanilla JS headspace. I want to do everything in vanilla JS and that is just muscle memory right now.I know that jQuery will get easier as time goes on, but I'm fighting myself right now. Our task this week was to make an ex-tracker! Yes!This assignment was pretty amusing and it was a fun project. The difficulty wasn't as bad as our last few assignments as the main focus was getting used to using jQuery over vanilla JS. I had a nearly functional app working by the time class started on Saturday. Implementing the jQuery was the tough part, but the jQuery cheatsheet was a huge help. Also, it's pretty sweet how the methods are named logically, it's sometimes exactly the word(s) you expect it to be!"
    },
    {
      "id": "blog012",
      "title": "First 3 months complete",
      "date": "05/14/2018",
      "post": "Hard to believe, but it's been a full 3 months since our cohort began the web development journey. With that 3 month anniversary came a week break with no classes or scheduled meetings. I took full advantage of that time to purchase a newer used car, travel to coastal South Carolina to visit family and build a calculator using jQuery. The calculator was a difficult task and I wish I had more dedicated time to work on it. My time this week was broken up and not as focused as the previous weeks. I think that contributed to the slower progress and difficulty sorting out the logic. Starting and stopping and working at odd times (during car rides, 15 minutes here, 20 minutes there) was not conducive to being productive. I learned a lot and was able to get more familiar with my jQuery selectors and DOM manipulation. I also learned how complicated calculators really are. I chose to build the calculator and I'm happy with the challenge this project gave me. I'd like to continue working on it, but we'll see how much free time the next 3 months allow."
    },
    {
      "id": "blog013",
      "title": "JavaScript Promises (continued)",
      "date": "05/21/2018",
      "post": "This week we continued with promises and started coding with them more. It was a good experience and I am feeeling more confident on them now. Still far off from being totally comfortable, but it's going in the right direction. Something I did to help, was to put together notes and code examples as a reference. This way, I can have notes that I need, right there in one place. I'm hoping that will make the coding process smoother from here on out. Work is still quite busy, our project seems to be going off the rails. I'm sure it will require more overtime, I just don't know when I'm supposed to log extra hours. It's exhausting! It's a holiday weekend, so I'm hoping I can get caught up on homework. Sadly, I'm behind on the ex-tracker and my local-weather app is moving a little slowly. Gotta keep at it!"
    }
  ]
}